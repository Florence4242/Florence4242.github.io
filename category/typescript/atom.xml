<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Florence的城堡 • Posts by &#34;typescript&#34; category</title>
    <link href="http://example.com" />
    <updated>2023-04-25T10:02:46.875Z</updated>
    <category term="Foo" />
    <category term="Bar" />
    <category term="Hexo" />
    <category term="教程" />
    <entry>
        <id>http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/</id>
        <title>TS函数</title>
        <link rel="alternate" href="http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/"/>
        <content type="html">&lt;h1 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;TS 中函数的定义和 JS 语法一样，但是多了&lt;strong&gt;数据校验&lt;/strong&gt;。&lt;br /&gt;
函数的参数需要根据类型来定义，每个函数都 &lt;code&gt;必须申明返回值&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;函数参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数参数&#34;&gt;#&lt;/a&gt; 函数参数&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;    function fn (id:number,name:string) &amp;#123;
        console.log(id);
        console.log(name);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在型参里面定义类型，传递的必须按照这个类型。&lt;mark&gt;一旦定义型参，那就必须传递参数&lt;/mark&gt;。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数的返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数的返回值&#34;&gt;#&lt;/a&gt; 函数的返回值&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-Typescript&#34;&gt;// void代表函数没有返回的结果
function demo ():void &amp;#123;
    // 在编程规范中，return必须写
    return
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;void 默认没有返回结果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Typescript&#34;&gt;// void代表函数没有返回的结果
function demo ():number &amp;#123;
    // 在编程规范中，return必须写
    return 123
&amp;#125;
const res:number = demo
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-04-25T10:02:46.875Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</id>
        <title>TS的类型声明</title>
        <link rel="alternate" href="http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/"/>
        <content type="html">&lt;h1 id=&#34;基本类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本类型&#34;&gt;#&lt;/a&gt; 基本类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类型声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;类型声明&lt;/code&gt; 是 TS 非常重要的一个特点；&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;类型声明&lt;/code&gt; 可以指定 TS 中变量的类型；&lt;/li&gt;
&lt;li&gt;指定类型后，当变量赋值时，TS 编译器会自动检查值是否符合类型声明：&lt;mark&gt;符合则赋值，否则报错&lt;/mark&gt;；&lt;/li&gt;
&lt;li&gt;简而言之， &lt;code&gt;类型声明&lt;/code&gt; 给变量设置了类型，使得变量只能存储某种类型的值；&lt;/li&gt;
&lt;li&gt;语法：
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;let 变量：类型；&lt;br /&gt;
let 变量：类型 = 值；&lt;br /&gt;
function fn (参数：类型，参数：类型): 返回值类型 {&lt;br /&gt;
...&lt;br /&gt;
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;    // 声明一个变量a，同时制定它的类型为Number
    let a: Number;

    // a的类型设置为了Number，在以后的使用过程中a只能是数字
    a = 10;
    a = 33;
    // a = &amp;quot;hello&amp;quot;;  // 会报错标红
    let b: String;
    b = &amp;quot;hello&amp;quot;
    // b = 123;

    // 声明完变量直接进行赋值
    let c: Boolean = false;
    c = true;

    // 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测
    let c = false;
    c = true;

    // c = 123

    // js中的函数是不考虑参数的类型和个数的
    function sum (a,b) &amp;#123;
      return a + b;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动类型判断&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TS 拥有自动的类型判断机制&lt;/li&gt;
&lt;li&gt;当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型；&lt;/li&gt;
&lt;li&gt;所以如果你的变量的声明和赋值是同时进行的，可以省略掉类型声明；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2023-04-25T10:02:46.874Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/</id>
        <title>TS的的准备工作</title>
        <link rel="alternate" href="http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/"/>
        <content type="html">&lt;h1 id=&#34;ts-的环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ts-的环境搭建&#34;&gt;#&lt;/a&gt; TS 的环境搭建&lt;/h1&gt;
&lt;h2 id=&#34;下载-nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载-nodejs&#34;&gt;#&lt;/a&gt; 下载 Node.js&lt;/h2&gt;
&lt;p&gt;可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==&#34;&gt; Node.js 的官网&lt;/span&gt;挑选喜欢的版本 🌝&lt;/p&gt;
&lt;h2 id=&#34;安装-nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-nodejs&#34;&gt;#&lt;/a&gt; 安装 Node.js&lt;/h2&gt;
&lt;p&gt;呐，哒哒哒一直点下一步&lt;/p&gt;
&lt;h2 id=&#34;使用-npm-全局安装-typescript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-npm-全局安装-typescript&#34;&gt;#&lt;/a&gt; 使用 npm 全局安装 TypeScript&lt;/h2&gt;
&lt;p&gt;・进入命令行&lt;br /&gt;
・在命令行输入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;$ npm i -g typescript
或
$ cnpm install -g typescript
或
$ yarn global add typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;创建一个-ts-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建一个-ts-文件&#34;&gt;#&lt;/a&gt; 创建一个 TS 文件&lt;/h2&gt;
&lt;p&gt;呐，还上不了图……，自己建着玩吧……&lt;/p&gt;
&lt;h2 id=&#34;使用-tsc-对-ts-文件进行编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-tsc-对-ts-文件进行编译&#34;&gt;#&lt;/a&gt; 使用 tsc 对 ts 文件进行编译&lt;/h2&gt;
&lt;p&gt;・进入命令行&lt;br /&gt;
・进入 ts 文件所在的目录&lt;br /&gt;
・执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-TypeScript&#34;&gt;$ tsc xxx.ts
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-01-30T09:04:16.265Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/</id>
        <title>Typescript</title>
        <link rel="alternate" href="http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/"/>
        <content type="html">&lt;p&gt;来早了，先去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnLw==&#34;&gt;官网&lt;/span&gt;看看？&lt;/p&gt;
</content>
        <updated>2023-01-13T08:11:15.181Z</updated>
    </entry>
</feed>
