{
    "version": "https://jsonfeed.org/version/1",
    "title": "Florence的城堡 • All posts by \"前端的丢人笔记\" category",
    "description": "我在这里随便写写",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/",
            "url": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/",
            "title": "git和hexo的一些常用命令",
            "date_published": "2023-04-25T10:02:46.875Z",
            "content_html": "<ul>\n<li><strong>一些 css 样式</strong></li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"><span>git</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这些不必多逼逼</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git add <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git commit <span class=\"token operator\">-</span>m<span class=\"token string\">\"xxxxx\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>git checkout master</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>git merge zz</pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"><span>hexo</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这些不必多逼逼</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo n <span class=\"token string\">\"新建一篇这个名为这个的笔记\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexo d</pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/",
            "url": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/",
            "title": "一些css样式",
            "date_published": "2023-04-25T10:02:46.875Z",
            "content_html": "<ul>\n<li><strong>一些 css 样式</strong></li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>一些常用以及不常用但比较重要的css样式</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 一些常用以及不常用但比较重要的 css 样式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author Florence</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 根据文字长度，width 宽度自适应 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> fit-content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 溢出文字显示省略号（单行） */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* 中划线以及控制中划线的宽度和颜色 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> line-through<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token property\">text-decoration-thickness</span><span class=\"token punctuation\">:</span> 4rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">text-decoration-color</span><span class=\"token punctuation\">:</span> #ff0000aa<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/",
            "url": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/",
            "title": "TS函数",
            "date_published": "2023-04-25T10:02:46.875Z",
            "content_html": "<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<blockquote>\n<p>TS 中函数的定义和 JS 语法一样，但是多了<strong>数据校验</strong>。<br />\n函数的参数需要根据类型来定义，每个函数都 <code>必须申明返回值</code> 。</p>\n</blockquote>\n<h2 id=\"函数参数\"><a class=\"anchor\" href=\"#函数参数\">#</a> 函数参数</h2>\n<pre><code class=\"language-TypeScript\">    function fn (id:number,name:string) &#123;\n        console.log(id);\n        console.log(name);\n    &#125;\n</code></pre>\n<ul>\n<li><strong>在型参里面定义类型，传递的必须按照这个类型。<mark>一旦定义型参，那就必须传递参数</mark>。</strong></li>\n</ul>\n<h2 id=\"函数的返回值\"><a class=\"anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h2>\n<pre><code class=\"language-Typescript\">// void代表函数没有返回的结果\nfunction demo ():void &#123;\n    // 在编程规范中，return必须写\n    return\n&#125;\n</code></pre>\n<p>void 默认没有返回结果</p>\n<pre><code class=\"language-Typescript\">// void代表函数没有返回的结果\nfunction demo ():number &#123;\n    // 在编程规范中，return必须写\n    return 123\n&#125;\nconst res:number = demo\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/",
            "url": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/",
            "title": "TS的类型声明",
            "date_published": "2023-04-25T10:02:46.874Z",
            "content_html": "<h1 id=\"基本类型\"><a class=\"anchor\" href=\"#基本类型\">#</a> 基本类型</h1>\n<ul>\n<li>\n<p>类型声明</p>\n<ul>\n<li><code>类型声明</code> 是 TS 非常重要的一个特点；</li>\n<li>通过 <code>类型声明</code> 可以指定 TS 中变量的类型；</li>\n<li>指定类型后，当变量赋值时，TS 编译器会自动检查值是否符合类型声明：<mark>符合则赋值，否则报错</mark>；</li>\n<li>简而言之， <code>类型声明</code> 给变量设置了类型，使得变量只能存储某种类型的值；</li>\n<li>语法：\n<ul>\n<li>\n<blockquote>\n<p>let 变量：类型；<br />\nlet 变量：类型 = 值；<br />\nfunction fn (参数：类型，参数：类型): 返回值类型 {<br />\n...<br />\n}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-TypeScript\">    // 声明一个变量a，同时制定它的类型为Number\n    let a: Number;\n\n    // a的类型设置为了Number，在以后的使用过程中a只能是数字\n    a = 10;\n    a = 33;\n    // a = &quot;hello&quot;;  // 会报错标红\n    let b: String;\n    b = &quot;hello&quot;\n    // b = 123;\n\n    // 声明完变量直接进行赋值\n    let c: Boolean = false;\n    c = true;\n\n    // 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测\n    let c = false;\n    c = true;\n\n    // c = 123\n\n    // js中的函数是不考虑参数的类型和个数的\n    function sum (a,b) &#123;\n      return a + b;\n    &#125;\n</code></pre>\n</li>\n<li>\n<p>自动类型判断</p>\n<ul>\n<li>TS 拥有自动的类型判断机制</li>\n<li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型；</li>\n<li>所以如果你的变量的声明和赋值是同时进行的，可以省略掉类型声明；</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/02/15/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7%20copy/",
            "url": "http://example.com/2023/02/15/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7%20copy/",
            "title": "计算相差天数",
            "date_published": "2023-02-15T02:18:49.980Z",
            "content_html": "<ul>\n<li><strong>获取当前时间与时间显示格式</strong></li>\n</ul>\n<pre><code class=\"language-TypeScript\">\n/**\n * 计算相差天数\n * dateAndTime显示日期和时间；\n * dateOnly只显示日期；\n * timeOnly只显示时间\n * @author Florence\n*/\nconst fnSurplus = () =&gt; &#123;\n\t// console.log(&quot;计算剩余时间&quot;);\n\t_this.end_time = _this.season_data.end_time.split(&quot;-&quot;)\n\t//date1结束时间\n\tlet date1 = new Date(_this.end_time[0],_this.end_time[1] - 1,_this.end_time[2]);\n\t//date2当前时间\n\tlet date2 = new Date();\n\tdate1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());\n\tdate2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());\n\tconst diff = date1.getTime() - date2.getTime(); //目标时间减去当前时间\n\t_this.surplus_days = diff / (24 * 60 * 60 * 1000);  //计算当前时间与结束时间之间相差天数\n\t// console.log(&quot;diff&quot;,diff);\n\t// console.log(&quot;相差天数&quot;,_this.surplus_days);\n&#125;\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/31/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "url": "http://example.com/2023/01/31/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "title": "获取时间与格式",
            "date_published": "2023-01-31T09:53:50.639Z",
            "content_html": "<ul>\n<li><strong>获取当前时间与时间显示格式</strong></li>\n</ul>\n<pre><code class=\"language-TypeScript\">/**\n * 时间格式枚举\n * dateAndTime显示日期和时间；\n * dateOnly只显示日期；\n * timeOnly只显示时间\n * @author Florence\n*/\nexport enum DateFormat &#123;\n    dateAndTime,\n    dateOnly,\n    timeOnly\n&#125;\n\n/**\n * 获取当前日期字符串\n * @param format 日期格式\n * @param showMilliseconds 是否显示毫秒\n * @returns 日期时间字符串\n * @author Florence\n */\n\nexport function getTimeStr(format: DateFormat = DateFormat.dateAndTime, showMilliseconds: boolean = true): string &#123;\n    let date = new Date();\n    let dateStr = `$&#123;date.getFullYear()&#125;-$&#123;date.getMonth()&#125;-$&#123;date.getDate()&#125;`;\n    let timeStr = `$&#123;formatTimeNum(date.getHours())&#125;:$&#123;formatTimeNum(date.getMinutes())&#125;:$&#123;formatTimeNum(date.getSeconds())&#125;`;\n    if (showMilliseconds) &#123;\n        timeStr += &quot;.&quot;;\n        let millis = date.getMilliseconds();\n        if (millis &lt; 10) &#123;\n            timeStr += &quot;00&quot; + millis;\n        &#125; else if (millis &lt; 100) &#123;\n            timeStr += &quot;0&quot; + millis;\n        &#125; else &#123;\n            timeStr += millis\n        &#125;\n    &#125;\n    if (format == DateFormat.dateAndTime) &#123;\n        return dateStr + &quot; &quot; + timeStr;\n    &#125;\n    if (format == DateFormat.dateOnly) &#123;\n        return dateStr;\n    &#125;\n    if (format == DateFormat.timeOnly) &#123;\n        return timeStr;\n    &#125;\n    return  &quot;&quot;;\n&#125;\n\nfunction formatTimeNum (timeNum: number): string &#123;\n    return timeNum &lt; 10 ? &quot;0&quot; + timeNum : timeNum;\n&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/",
            "url": "http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/",
            "title": "TS的的准备工作",
            "date_published": "2023-01-30T09:04:16.265Z",
            "content_html": "<h1 id=\"ts-的环境搭建\"><a class=\"anchor\" href=\"#ts-的环境搭建\">#</a> TS 的环境搭建</h1>\n<h2 id=\"下载-nodejs\"><a class=\"anchor\" href=\"#下载-nodejs\">#</a> 下载 Node.js</h2>\n<p>可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==\"> Node.js 的官网</span>挑选喜欢的版本 🌝</p>\n<h2 id=\"安装-nodejs\"><a class=\"anchor\" href=\"#安装-nodejs\">#</a> 安装 Node.js</h2>\n<p>呐，哒哒哒一直点下一步</p>\n<h2 id=\"使用-npm-全局安装-typescript\"><a class=\"anchor\" href=\"#使用-npm-全局安装-typescript\">#</a> 使用 npm 全局安装 TypeScript</h2>\n<p>・进入命令行<br />\n・在命令行输入</p>\n<pre><code class=\"language-TypeScript\">$ npm i -g typescript\n或\n$ cnpm install -g typescript\n或\n$ yarn global add typescript\n</code></pre>\n<h2 id=\"创建一个-ts-文件\"><a class=\"anchor\" href=\"#创建一个-ts-文件\">#</a> 创建一个 TS 文件</h2>\n<p>呐，还上不了图……，自己建着玩吧……</p>\n<h2 id=\"使用-tsc-对-ts-文件进行编译\"><a class=\"anchor\" href=\"#使用-tsc-对-ts-文件进行编译\">#</a> 使用 tsc 对 ts 文件进行编译</h2>\n<p>・进入命令行<br />\n・进入 ts 文件所在的目录<br />\n・执行命令</p>\n<pre><code class=\"language-TypeScript\">$ tsc xxx.ts\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Vue/Vue/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Vue/Vue/",
            "title": "Vue3",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>3 确实比 2 要爽一些，但是 3 的资源有点少。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvZ3VpZGUvaW50cm9kdWN0aW9uLmh0bWw=\">Vue3</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/",
            "title": "Typescript",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>来早了，先去<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnLw==\">官网</span>看看？</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/JavaScript/JavaScript/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/JavaScript/JavaScript/",
            "title": "JavaScript",
            "date_published": "2023-01-13T08:11:15.180Z",
            "content_html": "<p>嘿嘿，之后再整理吧！先占个位置 🥰</p>\n",
            "tags": []
        }
    ]
}