{
    "version": "https://jsonfeed.org/version/1",
    "title": "Florence的城堡 • All posts by \"后端的现眼学习\" category",
    "description": "我在这里随便写写",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/25/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/CSharp-1/",
            "url": "http://example.com/2023/04/25/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/CSharp-1/",
            "title": "CSharp入门！",
            "date_published": "2023-04-25T10:02:46.876Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9jc2hhcnAv\">官网</span>！</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/25/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/HelloWorld/",
            "url": "http://example.com/2023/04/25/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/HelloWorld/",
            "title": "Hello World！（类）",
            "date_published": "2023-04-25T10:02:46.876Z",
            "content_html": "<h1 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello World</h1>\n<ul>\n<li>类（class）构成程序的主体</li>\n<li>名称空间（namespace）以树形结构组织类（和其他类型）\n<ul>\n<li>如 Button 和 Path 类</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c#\">namespace HelloWorld\t//命名空间，下面所编写的“Program”这个类，放在\t\t\t\t\t\t\t\t\t\t\t\t了“HelloWorld”这个空间里面了\nclass Program\t//一个叫做“Program”的类\n&#123;\n  static void Main(string[] args)\n  &#123;\n    Console.WriteLine(&quot;Hello World!&quot;);\n  &#125;\n&#125;\n</code></pre>\n<ul>\n<li><code>类库</code> 引用是使用名称空间的物理基础\n<ul>\n<li>不同技术类型的项目会默认引用不同的类库</li>\n</ul>\n</li>\n<li>DLL 引用（黑盒引用，无源代码）\n<ul>\n<li>NuGet 简介</li>\n</ul>\n</li>\n<li>项目引用（白盒引用，有源代码）</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Golang/Golang/",
            "url": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Golang/Golang/",
            "title": "明天再学！",
            "date_published": "2023-01-13T08:15:55.654Z",
            "content_html": "<p>明天再学！<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuLw==\">官网</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuLw==\">官网</span>！</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/websocket/",
            "url": "http://example.com/2023/01/13/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/websocket/",
            "title": "websocket",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<blockquote>\n<p>在用户不感知的情况下，服务器将数据推送给浏览器的技术，就是<mark>服务器推送技术</mark>，也叫<mark> comet 技术</mark>。</p>\n</blockquote>\n<h2 id=\"http定时轮询\"><a class=\"anchor\" href=\"#http定时轮询\">#</a> HTTP 定时轮询</h2>\n<p>前端不断地定时向后端服务器发起请求进行询问，服务器端收到请求后响应消息，比如扫码登录；</p>\n<blockquote>\n<p>定时轮询存在的问题：</p>\n<ul>\n<li>消耗带宽，增加下游服务器的负担；</li>\n<li>会有卡顿，响应不及时的情况；</li>\n</ul>\n</blockquote>\n<h2 id=\"长轮询\"><a class=\"anchor\" href=\"#长轮询\">#</a> 长轮询</h2>\n<p><mark>发起一个请求，在较长时间内等待服务器响应的机制。</mark></p>\n<p>HTTP 发出请求后，会给服务器留一定的时间做响应，规定时间内没返回就是超时；</p>\n<p>如果将 HTTP 请求将超时设置的很大，比如 30s，在这 30s 内只要服务器收到了扫码请求，就立马返回给客户端；如果超时，就立马发起下一次请求。</p>\n<p>这样就减少了 HTTP 请求个数，而且大部分情况下 30s 内用户会进行扫码操作，所以响应也是及时的。</p>\n<p>例如：百度云网盘；消息队列 RocketMQ，消费者取数据也用到了长轮询</p>\n<blockquote>\n<p>不论是定时轮询还是长轮询，本质上还是客户端主动取数据，只能应用于例如扫码等简单场景；</p>\n<p>如果遇到游戏场景，游戏一般有大量的数据需要从服务器推送到客户端，这时就需要用到 websocket 了。</p>\n</blockquote>\n<h2 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> websocket</h2>\n<p>TCP 连接的两端 <code>client</code>  和 <code>server</code> ，同一时间里，双方都可以主动向对方发送数据，这就是所谓的 <code>全双工</code> 。</p>\n<p>现在使用最广泛的 HTTP1.1 也是基于 TCP 协议的，同一时间里客户端和服务端只能有一方发送数据，这就是 <code>半双工</code> 。</p>\n<p>websocket 继承了 TCP 协议的全双工能力，并且还提供了解决粘包的方案。适用于服务器和客户端需要频繁交互的大部分场景，比如网页、小程序游戏、网页聊天室、以及类似飞书这样的网页协同办公软件。</p>\n<blockquote>\n<p>之所以会有半双工，是由于 HTTP 协议设计之初，考虑的是看看网页文本的场景，能做到客户端发起请求，再由服务器响应就够了，没有考虑网页游戏这种客户端和服务器之间都需要互相发送大量数据的场景，所以为了支持这样的场景，需要一个基于 TCP 的新协议，于是新的协议 websocket 协议就被设计出来了。</p>\n</blockquote>\n<h3 id=\"如何建立websocket连接\"><a class=\"anchor\" href=\"#如何建立websocket连接\">#</a> 如何建立 websocket 连接</h3>\n<p>浏览器在 TCP 建立三次握手之后都会使用 HTTP 先进行一次通信。如果此时是普通的 HTTP 请求，那后续双方就还是老样子，继续用普通 HTTP 协议进行交互。如果这时候想尽力 websocket 连接，就会在 HTTP 请求里带上一些特殊的 header 头：</p>\n<ul>\n<li>\n<p>第一步：</p>\n<ul>\n<li>\n<p><code>Connection: Upgrade</code>  表明浏览器想升级协议</p>\n</li>\n<li>\n<p><code>Upgrade: websocket</code>  表明客户端想升级成 websocket</p>\n</li>\n<li>\n<p><code>Sec-WebSocket-Key: 随机生成的BASE64码</code> ，发送给服务器，如果服务器支持升级成 websocket 协议，就会走 websocket 握手流程。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>第二步： <code>签名</code> ：根据客户端生成的 BASE64 码，用公开算法变成另一段字符串，放在 HTTP 响应头 header 里：</p>\n<ul>\n<li>HTTP/1.1 101 Switching Protocols，101 状态码指协议切换</li>\n<li>Sec-WebSocket-Accept: 新的字符串</li>\n<li>Upgrade: websocket</li>\n<li>Connection: Upgrade</li>\n</ul>\n</li>\n<li>\n<p>第三步：浏览器用同样的公开算法将 BASE64 码转成另一段字符串，如果这段字符串和服务器返回的字符串一致，那验证通过。</p>\n</li>\n</ul>\n<p>websocket 和 HTTP 都是基于 TCP 的协议，经历了三次握手之后利用 HTTP 升级成 ws 协议，后续双方就使用 ws 的数据格式进行通信，数据包在 ws 中被叫做 <code>帧</code> 。</p>\n<blockquote>\n<p>ws 不是基于 HTTP 的新协议，因为 ws 只有在建立连接时才用到 HTTP，升级完成后就和 HTTP 没有任何关系了</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/TPC%E5%8D%8F%E8%AE%AE/",
            "url": "http://example.com/2023/01/13/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/TPC%E5%8D%8F%E8%AE%AE/",
            "title": "TPC协议",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<h2 id=\"tcp协议与udp协议\"><a class=\"anchor\" href=\"#tcp协议与udp协议\">#</a> TCP 协议与 UDP 协议</h2>\n<blockquote>\n<p>TCP 协议与 UDP 协议最大的区别就是 <code>TCP基于连接</code> ， <code>UDP基于非连接</code></p>\n<p>![image-20230612151333408](/Users/artist/Library/Application Support/typora-user-images/image-20230612151333408.png)</p>\n<p>TCP 基于连接就相当于打电话，UDP 基于非连接就相当于写信</p>\n<p>TCP 的保证过程： <code>三次握手</code> ， <code>传输确认</code> ， <code>四次挥手</code></p>\n</blockquote>\n<h2 id=\"tcp的三次握手建立连接\"><a class=\"anchor\" href=\"#tcp的三次握手建立连接\">#</a> TCP 的三次握手（建立连接）</h2>\n<ul>\n<li>第一次握手\n<ul>\n<li><code>客户端</code> 向 <code>服务端</code> 发送 SYN 包，（能否与你建立连接？若服务端同意连接，则进行下一步）</li>\n</ul>\n</li>\n<li>第二次握手\n<ul>\n<li><code>服务端</code> 向  <code>客户端</code> 返回 SYN + ACK 包</li>\n</ul>\n</li>\n<li>第三次握手\n<ul>\n<li><code>客户端</code> 收到 SYN 和 ACK 包后向 <code>服务端</code> 发送 ACK 包，建立连接</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Q：为什么是三次握手而不是两次握手？</p>\n<p>A：为了防止已失效的请求报文突然又传到服务器引起错误。</p>\n<ul>\n<li>假设采用两次握手连接，如果由于网络阻塞或者其他原因导致第一个 SYN 包未能及时发送至服务端，从而服务端未能返回 SYN 和 ACK 包至客户端\n<ul>\n<li>于是客户端会发送第二个 SYN 包，发送成功后服务端会返回 SYN + ACK，此时连接建立成功</li>\n<li>此时第一个 SYN 包恢复正常，服务端会认为客户端又发起了一个新的连接，从而服务端会进入等待数据状态。</li>\n<li>这样服务端会认为是两个连接，客户端会认为是一个连接，会造成状态不一致。</li>\n</ul>\n</li>\n<li>如果采用三次握手情况下，服务端收不到最后的 ACK 包，自然不会认为连接建立成功。</li>\n</ul>\n<p><strong> <code>所以三次握手从本质上来说，就是为了解决网络信道不可靠的问题。是为了基于不可靠的信道上建立可靠的连接。</code> </strong></p>\n</blockquote>\n<h2 id=\"tcp的四次挥手关闭连接\"><a class=\"anchor\" href=\"#tcp的四次挥手关闭连接\">#</a> TCP 的四次挥手（关闭连接）</h2>\n<ul>\n<li>\n<p>第一次挥手</p>\n<ul>\n<li><code>客户端</code> 向服务端发送 FIN 包发起连接关闭请求</li>\n<li><code>客户端</code> 进入 <code>终止等待1</code>  状态</li>\n</ul>\n</li>\n<li>\n<p>第二次挥手</p>\n<ul>\n<li><code>服务端</code> 收到 FIN 包，向客户端发送 ACK 包，表示自己进入了 <code>关闭等待</code> 状态</li>\n<li><code>客户端</code> 进入 <code>终止等待2</code>  状态</li>\n<li>此时服务端还可以发送未发送的数据，客户端还可以接受未接收的数据</li>\n</ul>\n</li>\n<li>\n<p>第三次挥手</p>\n<ul>\n<li><code>服务端</code> 发送完数据之后，向客户端发送 FIN 包</li>\n<li><code>服务端</code> 进入 <code>最后确认状态</code></li>\n</ul>\n</li>\n<li>\n<p>第四次挥手</p>\n<ul>\n<li><code>客户端</code> 向服务端发送 ACK 包</li>\n<li><code>客户端</code> 进入超时等待状态，经过超时时间后关闭连接；</li>\n<li><code>服务端</code> 收到 ACK 包后会立即关闭连接</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Java/Java/",
            "url": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Java/Java/",
            "title": "加哇",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>等我问问岳畅……</p>\n",
            "tags": []
        }
    ]
}