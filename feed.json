{
    "version": "https://jsonfeed.org/version/1",
    "title": "Florence的城堡",
    "description": "我在这里随便写写",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/",
            "url": "http://example.com/2023/04/25/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/",
            "title": "git和hexo的一些常用命令",
            "date_published": "2023-04-25T09:02:00.333Z",
            "content_html": "<ul>\n<li><strong>一些 css 样式</strong></li>\n</ul>\n<figure class=\"highlight ts\"><figcaption><span>git</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这些不必多逼逼</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;xxxxx&quot;</span></span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge zz</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><figcaption><span>hexo</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这些不必多逼逼</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\">hexo n <span class=\"string\">&quot;新建一篇这个名为这个的笔记&quot;</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/",
            "url": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TS%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/",
            "title": "TS的类型声明",
            "date_published": "2023-03-20T08:47:10.643Z",
            "content_html": "<h1 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\">#</a> 基本类型</h1>\n<ul>\n<li>\n<p>类型声明</p>\n<ul>\n<li><code>类型声明</code> 是 TS 非常重要的一个特点；</li>\n<li>通过 <code>类型声明</code> 可以指定 TS 中变量的类型；</li>\n<li>指定类型后，当变量赋值时，TS 编译器会自动检查值是否符合类型声明：<mark>符合则赋值，否则报错</mark>；</li>\n<li>简而言之， <code>类型声明</code> 给变量设置了类型，使得变量只能存储某种类型的值；</li>\n<li>语法：\n<ul>\n<li>\n<blockquote>\n<p>let 变量：类型；<br>\nlet 变量：类型 = 值；<br>\nfunction fn (参数：类型，参数：类型): 返回值类型 {<br>\n…<br>\n}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>语法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个变量a，同时制定它的类型为Number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">Number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a的类型设置为了Number，在以后的使用过程中a只能是数字</span></span><br><span class=\"line\">a = <span class=\"number\">10</span>;</span><br><span class=\"line\">a = <span class=\"number\">33</span>;</span><br><span class=\"line\"><span class=\"comment\">// a = &quot;hello&quot;;  // 会报错标红</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">String</span>;</span><br><span class=\"line\">b = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// b = 123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明完变量直接进行赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"literal\">false</span>;</span><br><span class=\"line\">c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c = 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js中的函数是不考虑参数的类型和个数的</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span> (a,b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>自动类型判断</p>\n<ul>\n<li>TS 拥有自动的类型判断机制</li>\n<li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型；</li>\n<li>所以如果你的变量的声明和赋值是同时进行的，可以省略掉类型声明；</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/",
            "url": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/%E5%87%BD%E6%95%B0/",
            "title": "TS函数",
            "date_published": "2023-03-20T08:23:31.596Z",
            "content_html": "<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<blockquote>\n<p>TS 中函数的定义和 JS 语法一样，但是多了<strong>数据校验</strong>。<br>\n函数的参数需要根据类型来定义，每个函数都 <code>必须申明返回值</code> 。</p>\n</blockquote>\n<h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\">#</a> 函数参数</h2>\n<figure class=\"highlight typescript\"><figcaption><span>函数参数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span> (<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>在型参里面定义类型，传递的必须按照这个类型。<mark>一旦定义型参，那就必须传递参数</mark>。</strong></li>\n</ul>\n<h2 id=\"函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h2>\n<figure class=\"highlight typescript\"><figcaption><span>函数的返回值</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void代表函数没有返回的结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">demo</span> ():<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在编程规范中，return必须写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>void 默认没有返回结果</p>\n<figure class=\"highlight typescript\"><figcaption><span>函数的返回值</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void代表函数没有返回的结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">demo</span> ():<span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在编程规范中，return必须写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">res</span>:<span class=\"built_in\">number</span> = demo</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/",
            "url": "http://example.com/2023/03/20/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/%E4%B8%80%E4%BA%9Bcss%E6%A0%B7%E5%BC%8F/",
            "title": "一些css样式",
            "date_published": "2023-03-20T08:05:31.096Z",
            "content_html": "<ul>\n<li><strong>一些 css 样式</strong></li>\n</ul>\n<figure class=\"highlight css\"><figcaption><span>一些常用以及不常用但比较重要的css样式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一些常用以及不常用但比较重要的css样式</span></span><br><span class=\"line\"><span class=\"comment\"> * @author Florence</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 根据文字长度，width宽度自适应 */</span></span><br><span class=\"line\"><span class=\"attribute\">width</span>: fit-content;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 溢出文字显示省略号（单行） */</span></span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 中划线以及控制中划线的宽度和颜色 */</span></span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>-thickness: <span class=\"number\">4</span>rpx;</span><br><span class=\"line\"><span class=\"attribute\">text-decoration-color</span>: <span class=\"number\">#ff0000aa</span>;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/03/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/CSharp-1/",
            "url": "http://example.com/2023/03/03/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/CSharp/CSharp-1/",
            "title": "CSharp入门！",
            "date_published": "2023-03-03T05:39:25.735Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL2RvdG5ldC9jc2hhcnAv\">官网</span>！</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/02/15/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7%20copy/",
            "url": "http://example.com/2023/02/15/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7%20copy/",
            "title": "计算相差天数",
            "date_published": "2023-02-15T02:18:49.980Z",
            "content_html": "<ul>\n<li><strong>获取当前时间与时间显示格式</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>计算相差天数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算相差天数</span></span><br><span class=\"line\"><span class=\"comment\"> * dateAndTime显示日期和时间；</span></span><br><span class=\"line\"><span class=\"comment\"> * dateOnly只显示日期；</span></span><br><span class=\"line\"><span class=\"comment\"> * timeOnly只显示时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">Florence</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fnSurplus</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(&quot;计算剩余时间&quot;);</span></span><br><span class=\"line\">\t_this.<span class=\"property\">end_time</span> = _this.<span class=\"property\">season_data</span>.<span class=\"property\">end_time</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;-&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//date1结束时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> date1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(_this.<span class=\"property\">end_time</span>[<span class=\"number\">0</span>],_this.<span class=\"property\">end_time</span>[<span class=\"number\">1</span>] - <span class=\"number\">1</span>,_this.<span class=\"property\">end_time</span>[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">//date2当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> date2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">\tdate1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date1.<span class=\"title function_\">getFullYear</span>(), date1.<span class=\"title function_\">getMonth</span>(), date1.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">\tdate2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date2.<span class=\"title function_\">getFullYear</span>(), date2.<span class=\"title function_\">getMonth</span>(), date2.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> diff = date1.<span class=\"title function_\">getTime</span>() - date2.<span class=\"title function_\">getTime</span>(); <span class=\"comment\">//目标时间减去当前时间</span></span><br><span class=\"line\">\t_this.<span class=\"property\">surplus_days</span> = diff / (<span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>);  <span class=\"comment\">//计算当前时间与结束时间之间相差天数</span></span><br><span class=\"line\">\t<span class=\"comment\">// console.log(&quot;diff&quot;,diff);</span></span><br><span class=\"line\">\t<span class=\"comment\">// console.log(&quot;相差天数&quot;,_this.surplus_days);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/02/08/Cocos%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/Cocos%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/2023/02/08/Cocos%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/Cocos%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/",
            "title": "Cocos入门基础",
            "date_published": "2023-02-08T10:55:22.816Z",
            "content_html": "<h1 id=\"基础\"><a class=\"markdownIt-Anchor\" href=\"#基础\">#</a> 基础</h1>\n<h2 id=\"sprite-的参数\"><a class=\"markdownIt-Anchor\" href=\"#sprite-的参数\">#</a> Sprite 的参数</h2>\n<ul>\n<li>\n<p><code>单色精灵</code> <br>\n一般用于空气墙；</p>\n</li>\n<li>\n<p><code>Atlas</code>  --&gt; Sprite 的 Atlas 图集资源</p>\n</li>\n<li>\n<p>一般来说，我们可以使用第三方工具来进行图片资源压缩。压缩后会生成一个 PNG 大图和一个 plist 文件，这两个文件都需要导入到 CocosCreator 中才可以使用。压缩制作 Atlas 文件，可以使用 <code>Texture Packer</code>  或者 <code>Unity</code>  引擎的 <code>NGUI</code>  都可以</p>\n</li>\n<li>\n<p><code>Sprite Frame</code> <br>\n 渲染 Sprite 使用的 SpriteFrame 图片资源；</p>\n</li>\n<li>\n<p><code>Type</code>  --&gt; 渲染模式<br>\n包括： <code>普通(Simple)</code> 、 <code>九宫格(Sliced)</code> 、 <code>平铺(Tiled)</code> 、 <code>填充(Filled)</code>  和 <code>网格(Mesh)</code> ；</p>\n</li>\n<li>\n<p><code>Size Mode</code>  --&gt; 指定 Sprite 的尺寸</p>\n<ul>\n<li><code>Trimmed</code>  表示会使用原始图片资源裁剪透明像素后的尺寸；</li>\n<li><code>Raw</code>  表示会使用原始图片未经裁剪的尺寸；</li>\n<li><code>Custom</code>  表示会使用自定义尺寸。当用户手动修改过 Node 的 Size 属性后， <code>Size Mode</code>  会被自动设置为 <code>Custom</code> ，除非再次指定为前两种尺寸模式；</li>\n</ul>\n</li>\n<li>\n<p><code>Trim</code> <br>\n 勾选后将在渲染时去除原始图像周围的透明像素区域，<mark>该项仅在 Type 设置为 Simple 时生效</mark>；</p>\n</li>\n<li>\n<p><code>Scr Blend Factor</code> <br>\n 当前图像混合模式；</p>\n</li>\n<li>\n<p><code>Dst Blend Factor</code> <br>\n 背景图像混合模式，和上面的属性共同作用，可以将前景和背景 Sprite 用不同的方式混合渲染；</p>\n</li>\n</ul>\n<br>\n<h2 id=\"对脚本语言的支持\"><a class=\"markdownIt-Anchor\" href=\"#对脚本语言的支持\">#</a> 对脚本语言的支持</h2>\n<p>3.0 之后只支持 Typescript，不再支持 JavaScript。不过直接在 TS 中将代码写成 JS 也能执行。</p>\n<h2 id=\"脚本的生命周期函数\"><a class=\"markdownIt-Anchor\" href=\"#脚本的生命周期函数\">#</a> 脚本的生命周期函数</h2>\n<p>目前提供给用户的生命周期回调函数主要有：</p>\n<ul>\n<li><code>onLoad</code>\n<ul>\n<li>组件被加载时调用（第一个被执行）</li>\n</ul>\n</li>\n<li><code>onEnable</code>\n<ul>\n<li>当组件可用时执行</li>\n</ul>\n</li>\n<li><code>start</code>\n<ul>\n<li>初始化时调用，onLoad 执行完后调用</li>\n</ul>\n</li>\n<li><code>update(dt)</code>\n<ul>\n<li>刷新每一帧时调用， <code>dt</code>  代表帧间隔时间</li>\n</ul>\n</li>\n<li><code>lateUpdate(dt)</code>\n<ul>\n<li>update 执行完后马上会执行， <code>dt</code>  代表帧间隔时间</li>\n</ul>\n</li>\n<li><code>onDisable</code>\n<ul>\n<li>当组件不可用时执行</li>\n</ul>\n</li>\n<li><code>onDestroy</code>\n<ul>\n<li>组件被销毁时调用</li>\n</ul>\n</li>\n</ul>\n<p><mark><strong>Tips</strong></mark></p>\n<p>一个组件从初始化到激活，再到最终销毁的完整生命周期函数调用顺序为： <code>onLoad</code>  -&gt;  <code>onEnable</code>  -&gt;  <code>start</code>  -&gt;  <code>update</code>  -&gt;  <code>lateUpdate</code>  -&gt;  <code>onDisable</code>  -&gt;  <code>onDestroy</code> 。</p>\n<p>其中， <code>onLoad</code>  和  <code>start</code>  常常用于组件的<mark>初始化</mark>，只有在节点  <code>activeInHierarchy</code>  的情况下才能调用，并且最多只会被调用一次。除了上文提到的内容以及调用顺序的不同，它们还有以下区别：</p>\n<ul>\n<li>\n<p><mark>组件激活时</mark>：</p>\n<ul>\n<li><code>onLoad</code>  立即调用</li>\n<li><code>start</code>  延迟调用</li>\n</ul>\n</li>\n<li>\n<p><mark>组件 <code>enabled</code>  时是否调用</mark>：</p>\n<ul>\n<li><code>onLoad</code> ❌</li>\n<li><code>start</code> ✅</li>\n</ul>\n<h2 id=\"在脚本中调用节点\"><a class=\"markdownIt-Anchor\" href=\"#在脚本中调用节点\">#</a> 在脚本中调用节点</h2>\n</li>\n<li>\n<p><code>this.node</code> <br>\n 获取当前节点</p>\n</li>\n<li>\n<p><code>node.children</code> <br>\n 获取节点的子节点数组</p>\n</li>\n<li>\n<p><code>node.getChildByName(&quot;name&quot;)</code> <br>\n 通过名称获取子节点</p>\n</li>\n<li>\n<p><code>cc.find(&quot;node1/node2&quot;)</code> <br>\n 根据节点路径获取节点</p>\n</li>\n<li>\n<p><code>node.getParent()</code> <br>\n 获取父节点</p>\n</li>\n<li>\n<p><code>node.setParent(node0)</code> <br>\n 将当前节点设置为 node0 的子节点</p>\n</li>\n<li>\n<p><code>node.removeAllChildren()</code> <br>\n 移除节点的所有子节点</p>\n</li>\n<li>\n<p><code>node.removeChild(node0)</code> <br>\n 移除节子点 node0</p>\n</li>\n<li>\n<p><code>node.removeFromParent()</code> <br>\n 将子节点移除出它的父节点</p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/02/08/Cocos%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/",
            "url": "http://example.com/2023/02/08/Cocos%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/",
            "title": "Cocos入门基础之：交互事件",
            "date_published": "2023-02-08T10:55:22.816Z",
            "content_html": "<h1 id=\"鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h1>\n<figure class=\"highlight typescript\"><figcaption><span>鼠标事件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(<span class=\"attr\">eventType</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">callback</span>:<span class=\"keyword\">function</span>,<span class=\"attr\">target</span>:<span class=\"built_in\">any</span>,<span class=\"attr\">useCapture</span>:<span class=\"built_in\">boolean</span>);</span><br><span class=\"line\"><span class=\"comment\">// eventType这个参数就代表了具体的鼠标事件名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标点击时获取当前坐标</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;mousedown&quot;</span>, <span class=\"function\">(<span class=\"params\">event:cc.Event.EventMouse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cc.<span class=\"title function_\">log</span>(event.<span class=\"title function_\">getLocation</span>() + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(cc.<span class=\"property\">Node</span>.<span class=\"property\">EventType</span>.<span class=\"property\">MOUSE_DOWN</span>, <span class=\"function\">(<span class=\"params\">event:cc.Event.EventMouse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cc.<span class=\"title function_\">log</span>(event.<span class=\"title function_\">getLocation</span>() + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>eventType</code>  这个参数就代表了具体的鼠标事件名称，但是如果需要我们死记硬背例如 “mousedown” 之类的字符串显然在开发中容易记错，所以 cocos 为我们定义了一个类  <code>cc.Node.EventType</code> ，用于帮助我们记忆这些事件名。</p>\n</blockquote>\n<ul>\n<li>\n<p><mark><strong>一些鼠标事件</strong></mark></p>\n<table>\n<thead>\n<tr>\n<th>事件类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOUSE_DOWN</td>\n<td>鼠标按下</td>\n</tr>\n<tr>\n<td>MOUSE_ENTER</td>\n<td>鼠标移入节点的范围</td>\n</tr>\n<tr>\n<td>MOUSE_LEAVE</td>\n<td>鼠标移出节点的范围</td>\n</tr>\n<tr>\n<td>MOUSE_MOVE</td>\n<td>鼠标移动</td>\n</tr>\n<tr>\n<td>MOUSE_UP</td>\n<td>鼠标松开</td>\n</tr>\n<tr>\n<td>MOUSE_WHEEL</td>\n<td>鼠标滚轮</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><mark><strong>event 函数</strong></mark></p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getLocation()</td>\n<td>获取鼠标坐标，2D 返回 cc.vec2，3D 返回 cc.vec3</td>\n</tr>\n<tr>\n<td>getLocationX()</td>\n<td>获取鼠标 x 坐标</td>\n</tr>\n<tr>\n<td>getLocationY()</td>\n<td>获取鼠标 y 坐标</td>\n</tr>\n<tr>\n<td>getButton()</td>\n<td>获取鼠标按键，返回 number，0 代表左键、1 代表滚轮、2 代表右键，当然我们可以使用  <code>cc.Event.EventMouse</code>  类提供的静态属性代替这些 012</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>监听<br>\n可以给一个节点添加事件监听，当然也可以去除监听， <code>this.node.off(eventType)</code>  就可以去除掉相对应的事件监听。</p>\n</li>\n</ul>\n<h1 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h1>\n<blockquote>\n<p>键盘和鼠标事件类似，只不过键盘事件是游戏的全局事件，所以他通过<br>\n <code>cc.systemEvent.on(eventType, callback)</code>  来添加，用法和鼠标事件基本一样：</p>\n</blockquote>\n<ul>\n<li>键盘事件的用法</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>键盘事件的用法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc.<span class=\"property\">systemEvent</span>.<span class=\"title function_\">on</span>(</span><br><span class=\"line\">  cc.<span class=\"property\">SystemEvent</span>.<span class=\"property\">EventType</span>.<span class=\"property\">KEY_DOWN</span>,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">event: cc.Event.EventKeyboard</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 这里的event可以拿到对应的键盘按键的编号，比如[A]键等于65。</span></span><br><span class=\"line\"><span class=\"variable constant_\">EY</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>macro.KEY 的使用方法</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>macro.KEY 的使用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc.<span class=\"property\">systemEvent</span>.<span class=\"title function_\">on</span>(</span><br><span class=\"line\">  cc.<span class=\"property\">SystemEvent</span>.<span class=\"property\">EventType</span>.<span class=\"property\">KEY_DOWN</span>,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">event: cc.Event.EventKeyboard</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cc.log(event.keyCode)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.<span class=\"property\">keyCode</span> === cc.<span class=\"property\">macro</span>.<span class=\"property\">KEY</span>.<span class=\"property\">a</span>) &#123;</span><br><span class=\"line\">      cc.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;按下了a键&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      cc.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;按了其他键&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><mark><strong>一些键盘事件</strong></mark></p>\n<table>\n<thead>\n<tr>\n<th>事件类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KEY_UP</td>\n<td>键盘被按下</td>\n</tr>\n<tr>\n<td>KEY_DOWN</td>\n<td>键盘松开</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h1 id=\"触摸事件\"><a class=\"markdownIt-Anchor\" href=\"#触摸事件\">#</a> 触摸事件</h1>\n<p>触摸事件和鼠标事件也是一样的，只不过事件类型改为：</p>\n<table>\n<thead>\n<tr>\n<th>事件类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TOUCH_START</td>\n<td>触摸开始</td>\n</tr>\n<tr>\n<td>TOUCH_MOVE</td>\n<td>触摸移动</td>\n</tr>\n<tr>\n<td>TOUCH_END</td>\n<td>触摸结束</td>\n</tr>\n<tr>\n<td>TOUCH_CANCEL</td>\n<td>触摸取消</td>\n</tr>\n</tbody>\n</table>\n<p>并且，回调函数中的 event 只有坐标信息，没有按键信息。除此之外，触摸事件比鼠标事件多了一个<mark>多点触控编码</mark>， <code>event.getID()</code>  可以获取到触控的手指编码，第一个是 0，第二个是 1，以此类推</p>\n<ul>\n<li>触摸事件的用法</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>触摸事件的用法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(cc.<span class=\"property\">Node</span>.<span class=\"property\">EventType</span>.<span class=\"property\">TOUCH_START</span>, <span class=\"function\">(<span class=\"params\">event: cc.Event.EventTouch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cc.<span class=\"title function_\">log</span>(event.<span class=\"title function_\">getLocation</span>() + <span class=\"string\">&quot;,&quot;</span> + event.<span class=\"title function_\">getID</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#自定义事件\">#</a> 自定义事件</h1>\n<blockquote>\n<p>除了可以使用系统自带的 3 类事件，我们还可以自己定义事件类型。</p>\n</blockquote>\n<p>自定义事件的作用有点类似于 “微信小游戏制作工具” 中的 “通知”，即某些节点在特定情况下可以向其他节点发送通知（触发自定义事件），其他需要监听该自定义事件的节点在收到通知后可以做出响应。<br>\n例如飞机大战中的子弹，当子弹碰撞到敌机时，可以向该敌机发送通知（触发该敌机的自定义事件），该敌机在事件被触发后可以做出相应的操作，例如减血。</p>\n<ul>\n<li><mark><strong>定义自定义事件的监听：</strong></mark><br>\n <code>this.node.on(&quot;myEvent&quot;,callback);</code> ，myEvent 是自定义事件的名称，由我们自己定义。</li>\n</ul>\n<p>触发该自定义事件的方式有两种：</p>\n<ul>\n<li>\n<p><code>this.node.emit(&quot;myEvent&quot;,arg0,arg1,……,arg5);</code>  后面的 arg0~arg5 参数可以有也可以没有，他们是给事件中传递参数用的。</p>\n<figure class=\"highlight typescript\"><figcaption><span>this.node.emit</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要触发事件的精灵A中</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"function\">(<span class=\"params\">arg0: <span class=\"built_in\">Date</span>, arg1: <span class=\"built_in\">String</span>, arg2: <span class=\"built_in\">String</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cc.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;自定义事件触发&quot;</span> + arg0.<span class=\"title function_\">getFullYear</span>());</span><br><span class=\"line\">  cc.<span class=\"title function_\">log</span>(arg1, arg2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用事件的精灵B中</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">on</span>(cc.<span class=\"property\">Node</span>.<span class=\"property\">EventType</span>.<span class=\"property\">MOUSE_DOWN</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  cc.<span class=\"title function_\">find</span>(<span class=\"string\">&quot;avatar&quot;</span>).<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(), <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world!&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><mark><strong>分发到事件流</strong></mark></li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>自定义事件-分发到事件流</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> cc.<span class=\"property\">Event</span>.<span class=\"title class_\">EventCustom</span>(<span class=\"string\">&quot;myEvent&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">event.<span class=\"title function_\">setUserData</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"title function_\">dispatchEvent</span>(event);</span><br></pre></td></tr></table></figure>\n<p>其中， <code>event.setUserData()</code>  方法是给自定义事件中添加 <code>detail</code>  属性，这个可以用来传递参数。</p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/31/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "url": "http://example.com/2023/01/31/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/%E4%B8%8D%E5%A4%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "title": "获取时间与格式",
            "date_published": "2023-01-31T09:53:50.639Z",
            "content_html": "<ul>\n<li><strong>获取当前时间与时间显示格式</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption><span>获取时间与格式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间格式枚举</span></span><br><span class=\"line\"><span class=\"comment\"> * dateAndTime显示日期和时间；</span></span><br><span class=\"line\"><span class=\"comment\"> * dateOnly只显示日期；</span></span><br><span class=\"line\"><span class=\"comment\"> * timeOnly只显示时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">Florence</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">DateFormat</span> &#123;</span><br><span class=\"line\">    dateAndTime,</span><br><span class=\"line\">    dateOnly,</span><br><span class=\"line\">    timeOnly</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取当前日期字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> format 日期格式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> showMilliseconds 是否显示毫秒</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 日期时间字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">Florence</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getTimeStr</span>(<span class=\"params\">format: DateFormat = DateFormat.dateAndTime, showMilliseconds: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dateStr = <span class=\"string\">`<span class=\"subst\">$&#123;date.getFullYear()&#125;</span>-<span class=\"subst\">$&#123;date.getMonth()&#125;</span>-<span class=\"subst\">$&#123;date.getDate()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeStr = <span class=\"string\">`<span class=\"subst\">$&#123;formatTimeNum(date.getHours())&#125;</span>:<span class=\"subst\">$&#123;formatTimeNum(date.getMinutes())&#125;</span>:<span class=\"subst\">$&#123;formatTimeNum(date.getSeconds())&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (showMilliseconds) &#123;</span><br><span class=\"line\">        timeStr += <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> millis = date.<span class=\"title function_\">getMilliseconds</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (millis &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            timeStr += <span class=\"string\">&quot;00&quot;</span> + millis;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (millis &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            timeStr += <span class=\"string\">&quot;0&quot;</span> + millis;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeStr += millis</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (format == <span class=\"title class_\">DateFormat</span>.<span class=\"property\">dateAndTime</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dateStr + <span class=\"string\">&quot; &quot;</span> + timeStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (format == <span class=\"title class_\">DateFormat</span>.<span class=\"property\">dateOnly</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dateStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (format == <span class=\"title class_\">DateFormat</span>.<span class=\"property\">timeOnly</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> timeStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatTimeNum</span> (<span class=\"attr\">timeNum</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> timeNum &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + timeNum : timeNum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/",
            "url": "http://example.com/2023/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/TypeScript%E5%85%A5%E9%97%A8_1/",
            "title": "TS的的准备工作",
            "date_published": "2023-01-30T09:04:16.265Z",
            "content_html": "<h1 id=\"ts-的环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#ts-的环境搭建\">#</a> TS 的环境搭建</h1>\n<h2 id=\"下载-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#下载-nodejs\">#</a> 下载 Node.js</h2>\n<p>可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==\"> Node.js 的官网</span>挑选喜欢的版本 🌝</p>\n<h2 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\">#</a> 安装 Node.js</h2>\n<p>呐，哒哒哒一直点下一步</p>\n<h2 id=\"使用-npm-全局安装-typescript\"><a class=\"markdownIt-Anchor\" href=\"#使用-npm-全局安装-typescript\">#</a> 使用 npm 全局安装 TypeScript</h2>\n<p>・进入命令行<br>\n・在命令行输入</p>\n<figure class=\"highlight typescript\"><figcaption><span>scanner</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -g typescript</span><br><span class=\"line\">或</span><br><span class=\"line\">$ cnpm install -g typescript</span><br><span class=\"line\">或</span><br><span class=\"line\">$ yarn <span class=\"variable language_\">global</span> add typescript</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个-ts-文件\"><a class=\"markdownIt-Anchor\" href=\"#创建一个-ts-文件\">#</a> 创建一个 TS 文件</h2>\n<p>呐，还上不了图……，自己建着玩吧……</p>\n<h2 id=\"使用-tsc-对-ts-文件进行编译\"><a class=\"markdownIt-Anchor\" href=\"#使用-tsc-对-ts-文件进行编译\">#</a> 使用 tsc 对 ts 文件进行编译</h2>\n<p>・进入命令行<br>\n・进入 ts 文件所在的目录<br>\n・执行命令</p>\n<figure class=\"highlight typescript\"><figcaption><span>scanner</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tsc xxx.<span class=\"property\">ts</span></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/29/%E6%88%91%E8%BF%98%E6%98%AF%E4%BC%9A%E6%94%AF%E6%8C%81%E6%8B%9C%E4%BB%81%E6%85%95%E5%B0%BC%E9%BB%91/%E6%8B%9C%E4%BB%81/",
            "url": "http://example.com/2023/01/29/%E6%88%91%E8%BF%98%E6%98%AF%E4%BC%9A%E6%94%AF%E6%8C%81%E6%8B%9C%E4%BB%81%E6%85%95%E5%B0%BC%E9%BB%91/%E6%8B%9C%E4%BB%81/",
            "title": "拜仁是冠军",
            "date_published": "2023-01-29T06:38:28.689Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmNiYXllcm4uY24v\">拜仁是冠军！！！</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Golang/Golang/",
            "url": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Golang/Golang/",
            "title": "明天再学！",
            "date_published": "2023-01-13T08:15:55.654Z",
            "content_html": "<p>明天再学！<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuLw==\">官网</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xhbmcuZ29vZ2xlLmNuLw==\">官网</span>！</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E6%82%84%E6%82%84%E6%94%BE%E6%B4%8B%E5%B1%81/%E6%94%BE%E7%82%B9%E5%84%BF%E6%97%A5%E6%9C%AC%E5%B1%81/%E6%97%A5%E6%9C%AC%E5%B1%81/",
            "url": "http://example.com/2023/01/13/%E6%82%84%E6%82%84%E6%94%BE%E6%B4%8B%E5%B1%81/%E6%94%BE%E7%82%B9%E5%84%BF%E6%97%A5%E6%9C%AC%E5%B1%81/%E6%97%A5%E6%9C%AC%E5%B1%81/",
            "title": "日本屁",
            "date_published": "2023-01-13T08:11:15.182Z",
            "content_html": "<p>君日本语本当上手 🌝</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Vue/Vue/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Vue/Vue/",
            "title": "Vue3",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>3 确实比 2 要爽一些，但是 3 的资源有点少。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvZ3VpZGUvaW50cm9kdWN0aW9uLmh0bWw=\">Vue3</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/Typescript/Typescript/",
            "title": "Typescript",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>来早了，先去<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnLw==\">官网</span>看看？</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E6%82%84%E6%82%84%E6%94%BE%E6%B4%8B%E5%B1%81/%E6%94%BE%E7%82%B9%E5%84%BF%E5%BE%B7%E5%9B%BD%E5%B1%81/%E5%BE%B7%E5%9B%BD%E5%B1%81/",
            "url": "http://example.com/2023/01/13/%E6%82%84%E6%82%84%E6%94%BE%E6%B4%8B%E5%B1%81/%E6%94%BE%E7%82%B9%E5%84%BF%E5%BE%B7%E5%9B%BD%E5%B1%81/%E5%BE%B7%E5%9B%BD%E5%B1%81/",
            "title": "德国屁",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>Danke fürs Zusehen. Es hat noch nicht angefangen.</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Java/Java/",
            "url": "http://example.com/2023/01/13/%E5%90%8E%E7%AB%AF%E7%9A%84%E7%8E%B0%E7%9C%BC%E5%AD%A6%E4%B9%A0/Java/Java/",
            "title": "加哇",
            "date_published": "2023-01-13T08:11:15.181Z",
            "content_html": "<p>等我问问岳畅……</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E4%BA%BA%E9%97%B4%E9%AC%BC%E6%89%AF/%E7%AC%AC%E4%B8%80%E7%AF%87/",
            "url": "http://example.com/2023/01/13/%E4%BA%BA%E9%97%B4%E9%AC%BC%E6%89%AF/%E7%AC%AC%E4%B8%80%E7%AF%87/",
            "title": "一扯",
            "date_published": "2023-01-13T08:11:15.180Z",
            "content_html": "<p>扯呗那就，我铁好，过！</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/JavaScript/JavaScript/",
            "url": "http://example.com/2023/01/13/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%A2%E4%BA%BA%E7%AC%94%E8%AE%B0/JavaScript/JavaScript/",
            "title": "JavaScript",
            "date_published": "2023-01-13T08:11:15.180Z",
            "content_html": "<p>嘿嘿，之后再整理吧！先占个位置 🥰</p>\n",
            "tags": []
        }
    ]
}